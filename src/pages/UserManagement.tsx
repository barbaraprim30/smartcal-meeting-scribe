
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useUserRole } from '@/hooks/useUserRole';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Pencil, Plus, Shield, Trash, UserPlus } from 'lucide-react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import UserFormDialog from '@/components/user/UserFormDialog';
import { Skeleton } from '@/components/ui/skeleton';

export type User = {
  id: string;
  name: string;
  email: string;
  avatar_url: string | null;
  role: 'admin' | 'user';
  created_at?: string;
};

const UserManagement: React.FC = () => {
  const { toast } = useToast();
  const { isAdmin } = useUserRole();
  
  const [users, setUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  
  // Fetch users data from Supabase
  useEffect(() => {
    const fetchUsers = async () => {
      if (!isAdmin) return;

      try {
        setIsLoading(true);
        
        // Get profiles
        const { data: profiles, error: profilesError } = await supabase
          .from('profiles')
          .select('id, full_name, username, avatar_url, created_at');
          
        if (profilesError) throw profilesError;
        
        // Get user roles information
        const { data: userRoles, error: rolesError } = await supabase
          .from('user_roles')
          .select('user_id, role');
          
        if (rolesError) throw rolesError;
        
        // Transform data to match our User type
        const usersData: User[] = profiles.map(profile => {
          // Find role for this user
          const userRole = userRoles.find(role => role.user_id === profile.id);
          
          return {
            id: profile.id,
            name: profile.full_name || 'Unnamed User',
            email: profile.username || '',
            avatar_url: profile.avatar_url,
            role: userRole?.role === 'admin' ? 'admin' : 'user',
            created_at: profile.created_at,
          };
        });
        
        setUsers(usersData);
      } catch (error) {
        console.error('Error fetching users:', error);
        toast({
          title: "Error",
          description: "Failed to load users data",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchUsers();
  }, [isAdmin, toast, refreshTrigger]);
  
  const handleAddNewUser = () => {
    setEditingUser(null);
    setIsDialogOpen(true);
  };
  
  const handleEditUser = (user: User) => {
    setEditingUser(user);
    setIsDialogOpen(true);
  };
  
  const handleSaveUser = async (userData: User, isNew: boolean) => {
    try {
      if (isNew) {
        // In a real application, this would use Supabase auth admin APIs
        // For now, we'll simulate by adding to the profiles table
        const { data: profileData, error: profileError } = await supabase
          .from('profiles')
          .insert([
            { 
              id: userData.id, // In reality, this would be generated by auth
              full_name: userData.name,
              username: userData.email,
              avatar_url: userData.avatar_url
            }
          ]);

        if (profileError) throw profileError;
        
        // Add role if needed
        if (userData.role === 'admin') {
          const { error: roleError } = await supabase
            .from('user_roles')
            .insert([
              { user_id: userData.id, role: 'admin' }
            ]);
          
          if (roleError) throw roleError;
        }
        
        toast({
          title: "User Created",
          description: `New user ${userData.name} was created successfully`,
        });
      } else {
        // Update profile
        const { error: profileError } = await supabase
          .from('profiles')
          .update({ 
            full_name: userData.name,
            username: userData.email,
            avatar_url: userData.avatar_url
          })
          .eq('id', userData.id);
          
        if (profileError) throw profileError;
        
        // Check if role needs to be updated
        const currentUser = users.find(u => u.id === userData.id);
        if (currentUser && currentUser.role !== userData.role) {
          if (userData.role === 'admin') {
            // Add admin role
            const { error: addRoleError } = await supabase
              .from('user_roles')
              .upsert([
                { user_id: userData.id, role: 'admin' }
              ]);
            
            if (addRoleError) throw addRoleError;
          } else {
            // Remove admin role
            const { error: removeRoleError } = await supabase
              .from('user_roles')
              .delete()
              .eq('user_id', userData.id);
            
            if (removeRoleError) throw removeRoleError;
          }
        }
        
        toast({
          title: "User Updated",
          description: `User ${userData.name} has been updated successfully`,
        });
      }
      
      // Refresh user list
      setRefreshTrigger(prev => prev + 1);
      setIsDialogOpen(false);
    } catch (error: any) {
      console.error('Error saving user:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to save user data",
        variant: "destructive"
      });
    }
  };
  
  const handleDeleteUser = async (userId: string) => {
    try {
      // In a production environment, you would use Supabase Auth API to delete the user
      // For now, we'll just remove from profiles which will cascade delete from user_roles
      const { error } = await supabase
        .from('profiles')
        .delete()
        .eq('id', userId);
        
      if (error) throw error;
      
      setUsers(prev => prev.filter(user => user.id !== userId));
      
      toast({
        title: "User Deleted",
        description: "User has been removed from the system",
      });
    } catch (error: any) {
      console.error('Error deleting user:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to delete user",
        variant: "destructive"
      });
    }
  };
  
  // If not admin, show access restricted
  if (!isAdmin) {
    return (
      <div className="flex items-center justify-center h-full">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle>Access Restricted</CardTitle>
            <CardDescription>
              You don't have permission to access user management.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <p>This page is only available to administrators.</p>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">User Management</h1>
          <p className="text-muted-foreground">Manage user accounts and permissions</p>
        </div>
        <Button onClick={handleAddNewUser}>
          <UserPlus className="h-4 w-4 mr-2" />
          Add User
        </Button>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Users</CardTitle>
          <CardDescription>
            View and manage all user accounts
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="space-y-3">
              {[1, 2, 3].map(i => (
                <div key={i} className="flex items-center space-x-4">
                  <Skeleton className="h-12 w-12 rounded-full" />
                  <div className="space-y-2">
                    <Skeleton className="h-4 w-[250px]" />
                    <Skeleton className="h-4 w-[200px]" />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>User</TableHead>
                  <TableHead>Email</TableHead>
                  <TableHead>Role</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {users.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={4} className="text-center text-muted-foreground py-8">
                      No users found. Add a new user to get started.
                    </TableCell>
                  </TableRow>
                ) : (
                  users.map(user => (
                    <TableRow key={user.id}>
                      <TableCell>
                        <div className="flex items-center gap-3">
                          <Avatar>
                            <AvatarImage src={user.avatar_url || ''} />
                            <AvatarFallback>{user.name.substring(0, 2).toUpperCase()}</AvatarFallback>
                          </Avatar>
                          <div>
                            <div className="font-medium">{user.name}</div>
                            <div className="text-xs text-muted-foreground">
                              Created {new Date(user.created_at || '').toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>{user.email}</TableCell>
                      <TableCell>
                        {user.role === 'admin' ? (
                          <Badge className="bg-smartcal-600">
                            <Shield className="h-3 w-3 mr-1" />
                            Admin
                          </Badge>
                        ) : (
                          <Badge variant="outline">User</Badge>
                        )}
                      </TableCell>
                      <TableCell className="text-right">
                        <div className="flex items-center justify-end space-x-2">
                          <Button variant="ghost" size="icon" onClick={() => handleEditUser(user)}>
                            <Pencil className="h-4 w-4" />
                          </Button>
                          <Button variant="ghost" size="icon" onClick={() => handleDeleteUser(user.id)}>
                            <Trash className="h-4 w-4 text-destructive" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
      
      <UserFormDialog 
        isOpen={isDialogOpen} 
        onClose={() => setIsDialogOpen(false)} 
        onSave={handleSaveUser}
        user={editingUser}
      />
    </div>
  );
};

export default UserManagement;
